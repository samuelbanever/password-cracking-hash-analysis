PassWordCrackingProjectnotes

-first started a virtual machine via virtualbox, using kali Linux ISO
-in the command line made sure the tools I wanted to use are installed
-created a hash generation python file in VSCode, which uses hashlib and bcrypt modules to create different password hash types to test the cracking itself, in 3 steps
-First grab a few plaintext words I wanna hash
-I'll then generate the cryptographic hashes MD5 and SHA1 using hashlib which produce 128 bit and 160 bit hash value respectively
-Then generate bcrypt hashes which are more secure than MD5 and SHA1 hashes, they produce salts, which is random text that is added onto the end of a string to be hashed
-All set, running the file will produce 3 text files shown. Which each contain one hash per line
________

Now to Linux command Line

-Generate each hash beginning with MD5 and SHA1
-Make sure I have Apache utility installed and then produce the bcrypt hash
-I'll save the hashes to .txt files so I can feed them to the John the Ripper and/or Hashcat Kali packages
_____

Time to crack the hashes.
JOHN THE RIPPER
-Since we're already in the directory with all 3 hash files, we need to decompress the rockyou worldlist which I read was a popular file for projects like this
-Got sidetracked at this point, I accidentally forgot to run the folder in my Windows host OS as a shared folder through the VM so had to fix that really quick.
-Now I can run john against the sha1 hashes with the rockyou wordlist and view the cracked passwords as a result.
-Looks like it ran now I'll show what got cracked
-2 of the passwords were cracked out of the four hashes that were in the file, 50% not bad.
-Instead of hashlib, I'll now use bcrypt against john and see how it goes
-It went unbelievably slow, John is telling me that it'll take 3 weeks to crack the hashes and is moving at .01% every few minutes. Which makes sense
-After half an hour, John cracked two of the passwords
	-We essentially used a dictionary attack with MD5, SHA1 and bcrypt. But bcrypt hashes are far more complicated than the other two because of the salts it generates, making each hash attempt slower. The work factor is exponentially higher. 
	-Granted my GPU isn't the greatest but still, after researching bcrypt I found it intentionally takes more time, therefore memory, with each check due to it being a "key stretching" function. 
-So according to John the Ripper, bcrypt hashing is a more secure choice than SHA1 and MD5 algorithms. 



